measure_dict = {
    1:'''1. 컴파일러 기반 대응 기법
Stack Canaries: 스택 오버플로우로 인한 공격을 방지하기 위해, 함수의 반환 주소와 로컬 변수 사이에 특정 값을 삽입하는 방법입니다. 이 값을 "카나리(canary)"라고 부르며, 함수가 종료될 때 이 값이 변경되었는지 확인하여 스택 버퍼 오버플로우를 탐지합니다. GCC에서는 -fstack-protector 플래그로 활성화할 수 있습니다.
Fortify Source: 컴파일 시 버퍼 오버플로우가 발생할 수 있는 함수를 강화하는 방법입니다. 예를 들어, strcpy와 같은 함수를 strncpy로 대체하는 등의 작업이 포함됩니다. 이는 -D_FORTIFY_SOURCE=2 플래그를 통해 활성화할 수 있습니다.
2. 메모리 보호 기법
ASLR (Address Space Layout Randomization): 실행 중인 프로그램의 메모리 주소를 무작위로 배치하여 공격자가 특정 주소를 예측하기 어렵게 만듭니다. 이는 운영체제 수준에서 지원되며, 현대 운영체제에서는 기본적으로 활성화되어 있습니다.
DEP (Data Execution Prevention): 데이터를 저장하는 메모리 영역에서 코드가 실행되지 않도록 하는 방법입니다. 실행 가능한 코드와 데이터 영역을 엄격히 구분하여 악성 코드가 실행되지 않도록 합니다.
3. 코딩 및 개발 관행
안전한 함수 사용: strcpy, gets와 같이 버퍼 오버플로우에 취약한 함수 대신, strncpy, fgets와 같은 안전한 대체 함수를 사용하는 것이 중요합니다.
코드 리뷰 및 정적 분석 도구 사용: 코드 리뷰 및 정적 분석 도구를 사용하여 잠재적인 버퍼 오버플로우 취약점을 발견하고 수정합니다.
4. 운영체제 및 런타임 보호
W^X (Write XOR Execute): 메모리 페이지가 동시에 쓰기 가능하고 실행 가능하도록 하지 않는 정책입니다. 즉, 메모리 페이지가 쓰기 가능하면 실행은 불가능하고, 실행 가능하면 쓰기는 불가능하게 설정합니다.
SafeSEH (Safe Structured Exception Handling): 윈도우에서 제공하는 기법으로, 예외 처리 체인을 안전하게 유지하여 버퍼 오버플로우가 발생해도 공격자가 이를 악용하기 어렵게 만듭니다.'''
}

def Countermeasures(ai):
    data = measure_dict[ai]
    return data